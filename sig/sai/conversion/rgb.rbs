# Generated from lib/sai/conversion/rgb.rb with RBS::Inline

module Sai
  module Conversion
    # RGB color conversion utilities
    #
    # @author {https://aaronmallen.me Aaron Allen}
    # @since unreleased
    #
    # @api private
    module RGB
      # Get closest ANSI color for RGB values
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since unreleased
      #
      # @api private
      #
      # @param red [Float] the red component (0-1)
      # @param green [Float] the green component (0-1)
      # @param blue [Float] the blue component (0-1)
      #
      # @return [Symbol] the closest ANSI color name
      # @rbs (Float red, Float green, Float blue) -> Symbol
      def self.closest_ansi_color: (Float red, Float green, Float blue) -> Symbol

      # Determine if a color is dark
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since unreleased
      #
      # @api private
      #
      # @param red [Float] the red component (0-1)
      # @param green [Float] the green component (0-1)
      # @param blue [Float] the blue component (0-1)
      #
      # @return [Boolean] true if color is dark
      # @rbs (Float red, Float green, Float blue) -> bool
      def self.dark?: (Float red, Float green, Float blue) -> bool

      # Determine if a color is grayscale
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since unreleased
      #
      # @api private
      #
      # @param red [Float] the red component (0-1)
      # @param green [Float] the green component (0-1)
      # @param blue [Float] the blue component (0-1)
      #
      # @return [Boolean] true if color is grayscale
      # @rbs (Float red, Float green, Float blue) -> bool
      def self.grayscale?: (Float red, Float green, Float blue) -> bool

      # Convert a color value to RGB components
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since unreleased
      #
      # @api private
      #
      # @param color [String, Array<Integer>] the color to convert
      #
      # @raise [ArgumentError] if the color format is invalid
      # @return [Array<Integer>] the RGB components
      # @rbs (Array[Integer] | String | Symbol color) -> Array[Integer]
      def self.resolve: (Array[Integer] | String | Symbol color) -> Array[Integer]

      # Convert RGB values to 256-color cube index
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since unreleased
      #
      # @api private
      #
      # @param rgb [Array<Integer>] RGB values (0-255)
      #
      # @return [Integer] the color cube index
      # @rbs (Array[Integer] rgb) -> Integer
      def self.to_color_cube_index: (Array[Integer] rgb) -> Integer

      # Convert RGB values to grayscale index
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since unreleased
      #
      # @api private
      #
      # @param rgb [Array<Integer>] RGB values
      #
      # @return [Integer] the grayscale index
      # @rbs (Array[Integer] rgb) -> Integer
      def self.to_grayscale_index: (Array[Integer] rgb) -> Integer

      # Check if RGB values represent cyan
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since unreleased
      #
      # @api private
      #
      # @param red [Float] the red component (0-1)
      # @param green [Float] the green component (0-1)
      # @param blue [Float] the blue component (0-1)
      #
      # @return [Boolean] true if color is cyan
      # @rbs (Float red, Float green, Float blue) -> bool
      private def self.cyan?: (Float red, Float green, Float blue) -> bool

      # Convert a hex string to RGB values
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since unreleased
      #
      # @api private
      #
      # @param hex [String] the hex color code
      #
      # @return [Array<Integer>] the RGB components
      # @rbs (String hex) -> Array[Integer]
      private def self.hex_to_rgb: (String hex) -> Array[Integer]

      # Check if RGB values represent magenta
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since unreleased
      #
      # @api private
      #
      # @param red [Float] the red component (0-1)
      # @param green [Float] the green component (0-1)
      # @param blue [Float] the blue component (0-1)
      #
      # @return [Boolean] true if color is magenta
      # @rbs (Float red, Float green, Float blue) -> bool
      private def self.magenta?: (Float red, Float green, Float blue) -> bool

      # Convert a named color to RGB values
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since unreleased
      #
      # @api private
      #
      # @param color_name [String] the color name
      #
      # @raise [ArgumentError] if the color name is unknown
      # @return [Array<Integer>] the RGB components
      # @rbs (String color_name) -> Array[Integer]
      private def self.named_to_rgb: (String color_name) -> Array[Integer]

      # Determine if RGB values represent a primary color
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since unreleased
      #
      # @api private
      #
      # @param red [Float] the red component (0-1)
      # @param green [Float] the green component (0-1)
      # @param blue [Float] the blue component (0-1)
      #
      # @return [Boolean] true if color is primary
      # @rbs (Float red, Float green, Float blue) -> bool
      private def self.primary?: (Float red, Float green, Float blue) -> bool

      # Get the closest primary color
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since unreleased
      #
      # @api private
      #
      # @param red [Float] the red component (0-1)
      # @param green [Float] the green component (0-1)
      # @param blue [Float] the blue component (0-1)
      #
      # @return [Symbol] the primary color name
      # @rbs (Float red, Float green, Float blue) -> Symbol
      private def self.primary_color: (Float red, Float green, Float blue) -> Symbol

      # Determine if RGB values represent a secondary color
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since unreleased
      #
      # @api private
      #
      # @param red [Float] the red component (0-1)
      # @param green [Float] the green component (0-1)
      # @param blue [Float] the blue component (0-1)
      #
      # @return [Boolean] true if color is secondary
      # @rbs (Float red, Float green, Float blue) -> bool
      private def self.secondary?: (Float red, Float green, Float blue) -> bool

      # Get the closest secondary color
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since unreleased
      #
      # @api private
      #
      # @param red [Float] the red component (0-1)
      # @param green [Float] the green component (0-1)
      # @param blue [Float] the blue component (0-1)
      #
      # @return [Symbol] the secondary color name
      # @rbs (Float red, Float green, Float blue) -> Symbol
      private def self.secondary_color: (Float red, Float green, Float blue) -> Symbol

      # Validate RGB values
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since unreleased
      #
      # @api private
      #
      # @param color [Array<Integer>] the RGB components to validate
      # @return [Array<Integer>] the validated RGB components
      # @raise [ArgumentError] if the RGB values are invalid
      # @rbs (Array[Integer] color) -> Array[Integer]
      private def self.validate_rgb: (Array[Integer] color) -> Array[Integer]

      # Check if RGB values represent yellow
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since unreleased
      #
      # @api private
      #
      # @param red [Float] the red component (0-1)
      # @param green [Float] the green component (0-1)
      # @param blue [Float] the blue component (0-1)
      #
      # @return [Boolean] true if color is yellow
      # @rbs (Float red, Float green, Float blue) -> bool
      private def self.yellow?: (Float red, Float green, Float blue) -> bool
    end
  end
end
