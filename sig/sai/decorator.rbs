# Generated from lib/sai/decorator.rb with RBS::Inline

module Sai
  # A decorator for applying ANSI styles and colors to text
  #
  # @author {https://aaronmallen.me Aaron Allen}
  # @since 0.1.0
  #
  # @api public
  #
  # @note For each named color, two methods are dynamically generated:
  #   * color_name - Applies the color to the foreground
  #   * on_color_name - Applies the color to the backgroundAll color methods return {Decorator}
  #
  # @example Using a named color
  #   decorator.blue.decorate('Hello').to_s      #=> "\e[38;2;0;0;238mHello\e[0m"
  #   decorator.on_blue.decorate('Hello').to_s   #=> "\e[48;2;0;0;238mHello\e[0m"
  class Decorator
    include ColorManipulations

    include Gradients

    include HexColors

    include NamedColors

    include NamedStyles

    include RGBColors

    # Initialize a new instance of Decorator
    #
    # @author {https://aaronmallen.me Aaron Allen}
    # @since 0.1.0
    #
    # @api private
    #
    # @param mode [Integer] the color mode to use
    #
    # @return [Decorator] the new instance of Decorator
    # @rbs (?mode: Integer) -> void
    def initialize: (?mode: Integer) -> void

    # Apply the styles and colors to the text
    #
    # @author {https://aaronmallen.me Aaron Allen}
    # @since 0.1.0
    #
    # @api public
    #
    # @example
    #   decorator.red.on_blue.bold.decorate('Hello, world!').to_s #=> "\e[38;5;160;48;5;21;1mHello, world!\e[0m"
    #
    # @param text [String] the text to decorate
    #
    # @return [ANSI::SequencedString] the decorated text
    # @rbs (String text) -> ANSI::SequencedString
    def decorate: (String text) -> ANSI::SequencedString

    alias apply decorate

    alias call decorate

    alias encode decorate

    # Apply a specific color mode to the decorator
    #
    # @author {https://aaronmallen.me Aaron Allen}
    # @since 0.2.0
    #
    # @api public
    #
    # @example
    #   decorator.with_mode(Sai.mode.basic_auto) #=> => #<Sai::Decorator:0x123 @mode=1>
    #
    # @param mode [Integer] the color mode to use
    #
    # @return [Decorator] a new instance of Decorator with the applied color mode
    # @rbs (Integer mode) -> Decorator
    def with_mode: (Integer mode) -> Decorator

    private

    # Check if text should be decorated
    #
    # @author {https://aaronmallen.me Aaron Allen}
    # @since 0.2.0
    #
    # @api private
    #
    # @return [Boolean] `true` if text should be decorated, `false` otherwise
    # @rbs () -> bool
    def should_decorate?: () -> bool
  end
end
