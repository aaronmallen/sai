# Generated from lib/sai/decorator/delegation.rb with RBS::Inline

module Sai
  class Decorator
    # Delegates all methods from the Decorator class and its component modules
    #
    # @author {https://aaronmallen.me Aaron Allen}
    # @since unreleased
    #
    # @api private
    module Delegation
      # The list of component modules to delegate methods from
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since unreleased
      #
      # @api private
      #
      # @return [Array<Symbol>] the list of component modules
      COMPONENT_MODULES: Array[Symbol]

      # Install delegated methods on the given class or module
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since unreleased
      #
      # @api private
      #
      # @param klass [Class, Module] the class or module to install the methods on
      #
      # @return [void]
      # @rbs (Class | Module) -> void
      def self.install: (Class | Module) -> void

      # Collect all methods from the Decorator class and its component modules
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since unreleased
      #
      # @api private
      #
      # @return [Array<Symbol>] the list of methods to delegate
      # @rbs () -> Array[Symbol]
      private def self.collect_delegatable_methods: () -> Array[Symbol]
    end
  end
end
